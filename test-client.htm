<!DOCTYPE html>
<html>
<head>
    <title>Aegis Chat - Secure Test Client</title>
    <style>
        body { font-family: sans-serif; display: flex; height: 100vh; margin: 0; }
        .panel { flex: 1; padding: 1rem; border-left: 1px solid #ccc; display: flex; flex-direction: column; }
        .panel:first-child { border-left: none; }
        h2 { margin-top: 0; }
        input, button { display: block; width: 100%; margin-bottom: 0.5rem; padding: 0.5rem; box-sizing: border-box; }
        #messages { list-style-type: none; margin: 0; padding: 0; flex-grow: 1; overflow-y: auto; border: 1px solid #eee; margin-bottom: 1rem; }
        #messages > li { padding: 0.5rem 1rem; }
        #messages > li:nth-child(odd) { background: #f1f1f1; }
        #status { font-weight: bold; }
    </style>
</head>
<body>
    <div class="panel">
        <h2>1. Authentication</h2>
        <input id="username" placeholder="Username (e.g., alice)">
        <input id="password" type="password" placeholder="Password">
        <button id="loginBtn">Login</button>
        <hr>
        <h2>2. Connect to Chat</h2>
        <button id="connectBtn" disabled>Connect to Socket.IO</button>
        <p>Status: <span id="status">Not Connected</span></p>
        <p>Your User ID: <span id="userId">N/A</span></p>
        <p>Your Token: <textarea id="jwt" rows="4" style="width:100%; font-size: 10px;" readonly></textarea></p>
    </div>
    <div class="panel">
        <h2>3. Send Private Message</h2>
        <input id="recipientId" placeholder="Recipient's User ID">
        <input id="messageContent" placeholder="Your message...">
        <button id="sendBtn" disabled>Send</button>
        <hr>
        <h2>Received Messages</h2>
        <ul id="messages"></ul>
    </div>

    <script src="https://cdn.socket.io/4.7.5/socket.io.min.js"></script>
    <script>
        const loginBtn = document.getElementById('loginBtn');
        const connectBtn = document.getElementById('connectBtn');
        const sendBtn = document.getElementById('sendBtn');
        const statusEl = document.getElementById('status');
        const userIdEl = document.getElementById('userId');
        const jwtEl = document.getElementById('jwt');
        const messagesEl = document.getElementById('messages');

        let jwtToken = null;
        let socket = null;

        loginBtn.addEventListener('click', async () => {
            const username = document.getElementById('username').value;
            const password = document.getElementById('password').value;
            try {
                const response = await fetch('http://localhost:8000/api/auth/login', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ username, password })
                });
                const data = await response.json();
                if (!response.ok) throw new Error(data.message);
                
                jwtToken = data.token;
                userIdEl.textContent = data.user.id;
                jwtEl.value = jwtToken;
                connectBtn.disabled = false;
                alert('Login Successful!');
            } catch (err) {
                alert('Login Failed: ' + err.message);
            }
        });

        connectBtn.addEventListener('click', () => {
            if (socket) socket.disconnect();

            // Connect to Socket.IO, passing the JWT in the 'auth' object
            socket = io('http://localhost:8000', {
                auth: { token: jwtToken }
            });

            socket.on('connect', () => {
                statusEl.textContent = `Connected (${socket.id})`;
                connectBtn.textContent = 'Reconnect';
                sendBtn.disabled = false;
            });

            socket.on('disconnect', () => {
                statusEl.textContent = 'Not Connected';
                sendBtn.disabled = true;
            });

            socket.on('connect_error', (err) => {
                alert('Connection Failed: ' + err.message);
            });

            // Listen for private messages from the server
            socket.on('privateMessage', ({ content, senderId }) => {
                const item = document.createElement('li');
                item.textContent = `From ${senderId}: ${content}`;
                messagesEl.appendChild(item);
                window.scrollTo(0, document.body.scrollHeight);
            });
        });

        sendBtn.addEventListener('click', () => {
            const recipientId = document.getElementById('recipientId').value;
            const content = document.getElementById('messageContent').value;
            if (recipientId && content) {
                socket.emit('privateMessage', { recipientId, content });
                document.getElementById('messageContent').value = '';
            }
        });

        connectBtn.addEventListener('click', () => {
            if (socket) socket.disconnect();

            // Connect to Socket.IO, passing the JWT in the 'auth' object
            socket = io('http://localhost:8000', {
            auth: { token: jwtToken }
            });

            socket.on('connect', () => {
            statusEl.textContent = `Connected (${socket.id})`;
            connectBtn.textContent = 'Reconnect';
            sendBtn.disabled = false;
            });

            socket.on('disconnect', () => {
            statusEl.textContent = 'Not Connected';
            sendBtn.disabled = true;
            });

            socket.on('connect_error', (err) => {
            alert('Connection Failed: ' + err.message);
            });

            // Listen for private messages from the server
            socket.on('privateMessage', ({ content, senderId }) => {
            const item = document.createElement('li');
            item.textContent = `From ${senderId}: ${content}`;
            messagesEl.appendChild(item);
            window.scrollTo(0, document.body.scrollHeight);
            });

            // Listen for broadcast messages from the server
            socket.on('broadcastMessage', ({ content, senderId, timestamp }) => {
            const item = document.createElement('li');
            item.style.backgroundColor = '#fffbe6'; // Highlight broadcast messages
            item.style.fontWeight = 'bold';
            item.textContent = `[BROADCAST] ${content}`;
            messagesEl.appendChild(item);
            window.scrollTo(0, document.body.scrollHeight);
            });
        });
    </script>
</body>
</html>